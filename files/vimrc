call plug#begin()

" All the plugins
Plug 'scrooloose/syntastic'
" Plug 'Shougo/neocomplete.vim' " Does not work with neovim
Plug 'Shougo/deoplete.nvim'
Plug 'Shougo/vimproc.vim' "ghc-mod dependency
" Plug 'Shougo/vimshell.vim'

" Other plugins
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-abolish'
Plug 'Townk/vim-autoclose'
Plug 'airblade/vim-gitgutter'
"Plug 'zhaocai/GoldenView.Vim'
Plug 'bling/vim-airline'
Plug 'kien/ctrlp.vim'
Plug 'bkad/CamelCaseMotion'
Plug 'sjl/gundo.vim'

Plug 'moll/vim-bbye'
Plug 'majutsushi/tagbar'
Plug 'jpalardy/vim-slime'

" Language plugins
" Plug 'neovimhaskell/haskell-vim'
Plug 'bgapinski/vim2hs' "Personal fork
" Plin 'eagletmt/ghcmod-vim'
Plug 'eagletmt/neco-ghc'
Plug 'Twinside/vim-hoogle'
Plug 'idris-hackers/idris-vim'
Plug 'tmux-plugins/vim-tmux'
Plug 'nvie/vim-flake8'
Plug 'derekwyatt/vim-scala'
Plug 'dag/vim-fish'

"Instantly Better Plugins
Plug 'shinokada/listtrans.vim'
Plug 'atweiden/vim-vmath'
Plug 'jondkinney/dragvisuals.vim'

" Theme
Plug 'w0ng/vim-hybrid'

call plug#end()
filetype plugin indent on

" Basic settings
set autoindent
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab
set backspace=indent,eol,start
set number
set relativenumber
set ruler
set scrolloff=5
set showmode
set showcmd
" set ttyfast

set autoread
" set encoding=utf-8
set ffs=unix

set laststatus=2

set wildmenu
set wildmode=list:longest,full
set wildignore+=*.o,*.hi,*.aux,*.pyc,*.class

" Show bad whitespace
set list
" Need to change the color. Probably in color scheme
" highlight NonText ctermfg=red
if &listchars ==# 'eol:$'
  exec "set listchars=tab:\uBB\uBB,trail:\uB7,extends:>,precedes:<,nbsp:~"
endif

set cmdheight=1

syntax enable
filetype plugin on

set shell=zsh

set shortmess=atI

set hlsearch
set incsearch
set ignorecase
set smartcase
set gdefault
set showmatch
set hidden

set noerrorbells
set vb t_vb=

set clipboard=unnamedplus

set updatecount=0
set lbr
set tw=500
set wrap

set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//
set undofile

set sessionoptions=blank,buffers,curdir,folds,globals,help,localoptions,options,resize,tabpages,winsize,winpos
cmap w!! %!sudo tee > /dev/null %

set formatprg="PARINIT='rTbgqR B=.,?_A_a Q=_s>|' par\ -w72"
let $PATH = $PATH . ':' . expand("~/.vimscripts")

set mouse=a

" Color long lines
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%79v', 100)

" Key rebindings
let mapleader = "\<Space>"
set tm=2000

vnoremap <Leader>y "+y
nnoremap <Leader>y "+y
vnoremap <Leader>d "+d
nnoremap <Leader>d "+d
vnoremap <Leader>p "+p
nnoremap <Leader>p "+p

nnoremap <Leader>bd :Bd<CR>
nnoremap <Leader>bp :bp<CR>
nnoremap <Leader>bn :bn<CR>
nnoremap <Leader>tt :TagbarToggle<CR>
map <leader>tg :!codex update<CR>:call system("git hscope")<CR><CR>:call LoadHscope()<CR>
nnoremap <Leader>u :GundoToggle<CR>

noremap <Leader>b<space> :CtrlPBuffer<CR>

nnoremap <Leader>ma :set mouse=a<CR>
nnoremap <Leader>mo :set mouse=<CR>

" Change comma lists to bullet lists and vice versa
" nmap <Leader>l :call ListTrans_toggle_format()<CR>
" vmap <Leader>l :call ListTrans_toggle_format('visual')<CR>

nnoremap ; :
nnoremap j gj
nnoremap k gk

noremap <c-h> <c-w>h
noremap <c-k> <c-w>k
noremap <c-j> <c-w>j
noremap <c-l> <c-w>l

" Ex mode is never used
map Q gq

map <S-W> <Plug>CamelCaseMotion_w
map <S-B> <Plug>CamelCaseMotion_b
map <S-E> <Plug>CamelCaseMotion_e

nmap <Leader>nh :let @/=''<CR>

let g:slime_no_mappings = 1
xmap <leader>s <Plug>SlimeRegionSend
nmap <leader>s <Plug>SlimeMotionSend
nmap <leader>ss <Plug>SlimeLineSend

" Terminal color
if &term =~ '256color'
  set t_ut=
endif

set t_Co=256
set background=dark
colorscheme hybrid
hi Normal ctermbg = none

" Syntastic stuff
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_highlighting = 1
" let g:syntastic_auto_jump = 3
let g:syntastic_enable_signs = 1

hi! link SignColumn LineNr
hi! link SyntasticErrorSign ErrorMsg
hi! link SyntasticWarningSign WarningMsg

" Scala config for synastic
let g:syntastic_scala_scalastyle_jar = '/home/brian/.linters/scalastyle_2.11.jar' 
let g:syntastic_scala_scalastyle_config_file = '/home/brian/.linters/scalastyle-config.xml'
let g:syntastic_scala_checkers=['scalastyle', 'scalac']

nmap <Leader>ln :lnext<CR>
nmap <Leader>lp :lprev<CR>

hi Search ctermfg=white ctermbg=173 cterm=none guifg=#ffffff guibg=#e5786d gui=none
hi! link Visual Search

" " This rewires n and N to do the highlighing...
" nnoremap <silent> n   n:call HLNext(0.4)<cr>
" nnoremap <silent> N   N:call HLNext(0.4)<cr>

" " OR ELSE just highlight the match in red...
" function! HLNext (blinktime)
"     let [bufnum, lnum, col, off] = getpos('.')
"     let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
"     let target_pat = '\c\%#\%('.@/.'\)'
"     let blinks = 3
"     for n in range(1, blinks)
"       let red = matchadd('WhiteOnRed', target_pat, 101)
"       redraw
"       exec 'sleep ' . float2nr(a:blinktime / (2 * blinks) * 1000) . 'm'
"       call matchdelete(red)
"       redraw
"       exec 'sleep ' . float2nr(a:blinktime / (2 * blinks) * 1000) . 'm'
"     endfor
" endfunction

" Various plugin initialization
" let g:neocomplete#enable_at_startup = 1
let g:deoplete#enable_at_startup = 1
let g:airline#extensions#tabline#enabled = 1
let g:ctrlp_map = '<Leader>e'
let g:haskell_conceal = 0
let g:necoghc_enable_detailed_browse = 1
autocmd BufWritePost *.py call Flake8()

augroup sourcing
  autocmd!
  autocmd bufwritepost .vimrc source $MYVIMRC
augroup END

nmap <silent> <leader><cr> :noh\|hi Cursor guibg=red<cr>
augroup haskell
  autocmd!
  autocmd FileType haskell map <silent> <leader><cr> :noh<cr>:GhcModTypeClear<cr>:SyntasticReset<cr>
  autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
augroup END

augroup last_edit
  autocmd!
  autocmd BufReadPost *
       \ if line("'\"") > 0 && line("'\"") <= line("$") |
       \   exe "normal! g`\"" |
       \ endif
augroup END

set viminfo^=%

" Open window splits in various places
nmap <leader>wh :leftabove  vnew<CR>
nmap <leader>wl :rightbelow vnew<CR>
nmap <leader>wk :leftabove  new<CR>
nmap <leader>wj :rightbelow new<CR>

" Delete trailing white space on save
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

augroup whitespace
  autocmd!
  autocmd BufWrite *.hs :call DeleteTrailingWS()
  autocmd BufWrite *.py :call DeleteTrailingWS()
  autocmd BufWrite *.scala :call DeleteTrailingWS()
augroup END

" let g:tagbar_type_haskell = {
"     \ 'ctagsbin'  : 'hasktags',
"     \ 'ctagsargs' : '-x -c -o-',
"     \ 'kinds'     : [
"         \  'm:modules:0:1',
"         \  'd:data: 0:1',
"         \  'd_gadt: data gadt:0:1',
"         \  't:type names:0:1',
"         \  'nt:new types:0:1',
"         \  'c:classes:0:1',
"         \  'cons:constructors:1:1',
"         \  'c_gadt:constructor gadt:1:1',
"         \  'c_a:constructor accessors:1:1',
"         \  'ft:function types:1:1',
"         \  'fi:function implementations:0:1',
"         \  'o:others:0:1'
"     \ ],
"     \ 'sro'        : '.',
"     \ 'kind2scope' : {
"         \ 'm' : 'module',
"         \ 'c' : 'class',
"         \ 'd' : 'data',
"         \ 't' : 'type'
"     \ },
"     \ 'scope2kind' : {
"         \ 'module' : 'm',
"         \ 'class'  : 'c',
"         \ 'data'   : 'd',
"         \ 'type'   : 't'
"     \ }
" \ }

" set csprg=~/.vimscripts/hscope
set csto=1
set cst
set csverb
nnoremap <silent> <C-\> :cs find c <C-R>=expand("<cword>")<CR><CR>
" Automatically make cscope connections
" function! LoadHscope()
"   let db = findfile("hscope.out", ".;")
"   if (!empty(db))
"     let path = strpart(db, 0, match(db, "/hscope.out$"))
"     set nocscopeverbose " suppress 'duplicate connection' error
"     exe "cs add " . db . " " . path
"     set cscopeverbose
"   endif
" endfunction
" au BufEnter /*.hs call LoadHscope()

set completeopt+=longest

" Haskell stuff
" Type of expression under cursor
nmap <silent> <leader>ht :GhcModType<CR>
" Insert type of expression under cursor
nmap <silent> <leader>hT :GhcModTypeInsert<CR>
" GHC errors and warnings
" nmap <silent> <leader>hc :SyntasticCheck ghc_mod<CR>
autocmd BufWritePost *.hs GhcModCheckAndLintAsync

" Hoogle the word under the cursor
" nnoremap <silent> <leader>hh :Hoogle<CR>

" let g:hoogle_search_databases = "/home/brian/hoogle"
" Hoogle and prompt for input
" nnoremap <leader>hH :Hoogle

" Hoogle for detailed documentation (e.g. "Functor")
" nnoremap <silent> <leader>hi :HoogleInfo<CR>

" Hoogle for detailed documentation and prompt for input
" nnoremap <leader>hI :HoogleInfo

" Hoogle, close the Hoogle window
" nnoremap <silent> <leader>hz :HoogleClose<CR>


" function! Pointfree()
"   call setline('.', split(system('pointfree '.shellescape(join(getline(a:firstline, a:lastline), "\n"))), "\n"))
" endfunction
" vnoremap <silent> <leader>h. :call Pointfree()<CR>

" function! Pointful()
"   call setline('.', split(system('pointful '.shellescape(join(getline(a:firstline, a:lastline), "\n"))), "\n"))
" endfunction
" vnoremap <silent> <leader>h> :call Pointful()<CR>

" :let &makeprg='hdevtools check %'
" au FileType haskell nnoremap <buffer> <F1> :HdevtoolsType<CR>
" au FileType haskell nnoremap <buffer> <silent> <F2> :HdevtoolsClear<CR>
" au FileType haskell nnoremap <buffer> <silent> <F3> :HdevtoolsInfo<CR>

let g:slime_target = "tmux"
let g:slime_paste_file = tempname()
let g:slime_python_ipython = 1
